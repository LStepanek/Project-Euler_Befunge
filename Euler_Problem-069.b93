v000000    // Project Euler - Problem 69
################################################################################
################################################################################
################################################################################
v                     >p50g1+50pv                                         @.g07<
v                     ^1g0<     >30g1+:30p40g-       #v_"}}@"**60p   0>:1g70g*v$
>170p"P":10p3:20p*40p230pv^5g03_^#-" "g+1/g01\%g01:g03<p050p030<      ^+1<v06:<$
vp08*8**::**::8p11p10:" "<                                    _^#`g03g04< >g`  |
>"X"30g:10g%\10g/1+p30g>30g+:40g\`       #v_$>30g1+:30p:10g%\10g/1+g" "-|^  p07<
                       ^p+1/g01\%g01:\" ":<  ^                          <  




[10] width      80       "P"            // [sieve] & [enumerate]
[20] height     3        3              // [sieve] & [enumerate]
[30] position   0        (initial 0)    // [sieve] & [enumerate]
[40] size       240      (automatic)    // [sieve] & [enumerate]
[50] position_2 0        (initial 0)    // [enumerate]
[60] limit      1000000  "}}@"**        // [calc]
[70] result     1        (initial 1)    // [calc]


---------------------------------------

I had a really complicated solution where I tried to generate an Phi Sieve and had to work around a lot of corner cases.
Then I looked at [this](http://www.mathblog.dk/project-euler-69-find-the-value-of-n-%E2%89%A4-1000000-for-which-n%CF%86n-is-a-maximum/) solution and - well - it's faster and simpler than mine.
So I translated it to befunge.