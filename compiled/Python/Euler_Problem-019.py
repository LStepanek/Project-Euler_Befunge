# compiled with BefunCompile v1.0.1 (c) 2015
# execute with at least Python3
from random import randint
g=[[118,51,48,51,50,51,50,51,51,50,51,50,51,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],[118,51,49,51,50,51,50,51,51,50,51,50,51,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],[54,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],[62,50,42,62,58,58,48,103,34,48,34,45,52,55,42,43,92,48,112,58,58,118,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],[32,32,32,124,58,45,49,112,49,92,43,42,55,52,45,34,48,34,103,49,32,60,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],[118,32,36,60,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],[62,50,48,50,112,49,49,50,112,49,50,50,112,34,50,38,34,42,49,43,51,50,112,48,57,50,112,118,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],[118,50,48,43,49,103,50,48,112,50,57,43,103,50,57,33,43,45,49,103,50,49,37,55,103,50,48,60,62,35,32,32,32,32,32,32,32,48,35,32,118,35,32,32,32,60,32,32,32,32,32,32,62,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,62,118],[62,112,49,50,103,49,43,49,50,112,51,50,103,52,37,32,32,32,32,32,32,32,32,32,32,32,32,32,124,32,32,32,32,32,32,32,62,49,32,62,62,50,50,103,92,103,49,50,103,49,45,45,124,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,62,51,50,103,34,100,34,37,124,32,32,48,94,32,60,32,32,35,32,32,32,32,32,32,62,49,49,50,112,50,50,103,58,49,43,50,50,112,54,54,43,45,124,32],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,37,42,52,34,100,34,103,50,51,60,62,35,94,95,49,94,32,32,124,45,43,49,42,34,40,50,34,103,50,51,60,112,50,51,43,49,103,50,51,112,50,50,49,60,32],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,62,32,32,32,32,32,32,32,32,32,32,94,62,49,94,32,32,32,32,62,57,50,103,46,64,32,32,32,32,32,32,94,32,32,32,32,32,32,32,32,32,32,32,32,32,60]];
def gr(x,y):
    if(x>=0 and y>=0 and x<72 and y<12):
        return g[y][x];
    return 0;
def gw(x,y,v):
    if(x>=0 and y>=0 and x<72 and y<12):
        g[y][x]=v;
def rd():
    return bool(random.getrandbits(1))
def td(a,b):
    return bool(random.getrandbits(1))
def td(a,b):
    return ((0)if(b==0)else(a//b))
def tm(a,b):
    return ((0)if(b==0)else(a%b))
s=[]
def sp():
    global s
    if (len(s) == 0):
        return 0
    return s.pop()
def sa(v):
    global s
    s.append(v)
def sr():
    global s
    if (len(s) == 0):
        return 0
    return s[-1]
def _0():
    return (21)if(sp()!=0)else(8)
def _1():
    return (10)if(sp()!=0)else(16)
def _2():
    return (11)if(sp()!=0)else(14)
def _3():
    return (13)if(sp()!=0)else(12)
def _4():
    return (11)if(sp()!=0)else(15)
def _5():
    return (17)if(sp()!=0)else(18)
def _6():
    return (19)if(sp()!=0)else(20)
def _7():
    gw(12,0,((gr(12,0))-(48))+(28))
    gw(12,1,((gr(12,1))-(48))+(28))
    sa(11)
    sa(11)
    return 0
def _8():
    gw(0,2,2)
    gw(1,2,1)
    gw(2,2,1)
    gw(3,2,1901)
    gw(9,2,0)
    gw(9,2,((0)if(((tm(gr(0,2),7))+((gr(1,2))-(1)))!=0)else(1))+(gr(9,2)))
    gw(0,2,(gr(0,2))+(1))
    gw(1,2,(gr(1,2))+(1))
    sp()
    return 9
def _9():
    sa(tm(gr(3,2),4))
    return 1
def _10():
    sa((gr(gr(2,2),0))-((gr(1,2))-(1)))
    return 2
def _11():
    sa((gr(3,2))-(2001))
    return 3
def _12():
    print(gr(9,2),end="",flush=True)
    return 22
def _13():
    gw(9,2,((0)if(((tm(gr(0,2),7))+((gr(1,2))-(1)))!=0)else(1))+(gr(9,2)))
    gw(0,2,(gr(0,2))+(1))
    gw(1,2,(gr(1,2))+(1))
    return 9
def _14():
    gw(1,2,1)
    sa(gr(2,2))
    gw(2,2,(gr(2,2))+(1))
    sa(12)
    v0=sp()
    sa(sp()-v0)
    return 4
def _15():
    gw(2,2,1)
    gw(3,2,(gr(3,2))+(1))
    return 11
def _16():
    sa(tm(gr(3,2),100))
    return 5
def _17():
    sa((gr(gr(2,2),1))-((gr(1,2))-(1)))
    return 2
def _18():
    sa(tm(gr(3,2),400))
    return 6
def _19():
    sa((gr(gr(2,2),0))-((gr(1,2))-(1)))
    return 2
def _20():
    sa((gr(gr(2,2),1))-((gr(1,2))-(1)))
    return 2
def _21():
    sa(sr())
    sa(sr())
    sa(0)
    v0=sp()
    sa(gr(sp(),v0))
    sa(48)
    v0=sp()
    sa(sp()-v0)
    sa(28)
    sa(sp()+sp());
    v0=sp()
    v1=sp()
    sa(v0)
    sa(v1)
    sa(0)
    v0=sp()
    v1=sp()
    gw(v1,v0,sp())
    sa(sr())
    sa(sr())
    sa(1)
    v0=sp()
    sa(gr(sp(),v0))
    sa(48)
    v0=sp()
    sa(sp()-v0)
    sa(28)
    sa(sp()+sp());
    v0=sp()
    v1=sp()
    sa(v0)
    sa(v1)
    sa(1)
    v0=sp()
    v1=sp()
    gw(v1,v0,sp())
    sa(1)
    v0=sp()
    sa(sp()-v0)
    sa(sr())
    return 0
m=[_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21]
c=7
while c<22:
    c=m[c]()